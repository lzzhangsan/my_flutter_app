name: Flutter Build Debug APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发工作流

env:
  GRADLE_VERSION: '8.0.0'  # 与android/build.gradle中的Android Gradle插件版本匹配
  KOTLIN_VERSION: '1.8.0'  # 与android/build.gradle中的kotlin_version匹配

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 设置超时时间

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List project structure
        run: |
          echo "查看项目结构"
          ls -la
          ls -la android || echo "android目录不存在"
          ls -la patches || echo "patches目录不存在"

      # 设置Java环境
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      # 设置Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      # 显示环境信息
      - name: Show environment info
        run: |
          flutter --version
          java -version
          echo "检查Android SDK是否可用:"
          flutter doctor -v

      # 创建Gradle wrapper和需要的文件
      - name: Create Gradle Wrapper
        run: |
          echo "创建Gradle Wrapper文件..."
          # 确保android/gradle/wrapper目录存在
          mkdir -p android/gradle/wrapper
          
          # 创建gradle-wrapper.properties文件
          cat > android/gradle/wrapper/gradle-wrapper.properties << EOF
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.0-all.zip
          EOF
          
          # 下载gradle-wrapper.jar
          curl -L --retry 5 --retry-delay 3 --connect-timeout 60 -o android/gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.0.0/gradle/wrapper/gradle-wrapper.jar
          
          # 创建gradlew脚本
          cat > android/gradlew << 'EOF'
          #!/usr/bin/env sh
          
          #
          # Gradle start up script for UN*X
          #
          
          # Attempt to set APP_HOME
          # Resolve links: $0 may be a link
          PRG="$0"
          # Need this for relative symlinks.
          while [ -h "$PRG" ] ; do
              ls=`ls -ld "$PRG"`
              link=`expr "$ls" : '.*-> \(.*\)$'`
              if expr "$link" : '/.*' > /dev/null; then
                  PRG="$link"
              else
                  PRG=`dirname "$PRG"`"/$link"
              fi
          done
          SAVED="`pwd`"
          cd "`dirname \"$PRG\"`/" >/dev/null
          APP_HOME="`pwd -P`"
          cd "$SAVED" >/dev/null
          
          APP_NAME="Gradle"
          APP_BASE_NAME=`basename "$0"`
          
          # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options
