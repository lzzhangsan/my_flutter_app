name: Flutter Build Debug APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 设置超时时间

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置Java环境
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      # 设置Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      # 显示环境信息
      - name: Show environment info
        run: |
          flutter --version
          java -version
          echo "JAVA_HOME: $JAVA_HOME"
          flutter doctor -v

      # 修复Gradle和Flutter插件配置
      - name: Fix Gradle and Flutter plugin configuration
        run: |
          # 准备Gradle目录
          mkdir -p android/gradle/wrapper
          
          # 下载gradle-wrapper.jar
          curl -L --retry 5 --retry-delay 3 -o android/gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.0.0/gradle/wrapper/gradle-wrapper.jar
          
          # 创建gradle-wrapper.properties
          echo "distributionBase=GRADLE_USER_HOME" > android/gradle/wrapper/gradle-wrapper.properties
          echo "distributionPath=wrapper/dists" >> android/gradle/wrapper/gradle-wrapper.properties
          echo "zipStoreBase=GRADLE_USER_HOME" >> android/gradle/wrapper/gradle-wrapper.properties
          echo "zipStorePath=wrapper/dists" >> android/gradle/wrapper/gradle-wrapper.properties
          echo "distributionUrl=https\://services.gradle.org/distributions/gradle-8.0-all.zip" >> android/gradle/wrapper/gradle-wrapper.properties
          
          # 创建gradlew脚本
          echo '#!/bin/sh' > android/gradlew
          echo 'exec gradle "$@"' >> android/gradlew
          chmod +x android/gradlew
          
          # 修复gradle.properties文件
          echo "org.gradle.jvmargs=-Xmx1536M" > android/gradle.properties
          echo "android.useAndroidX=true" >> android/gradle.properties
          echo "android.enableJetifier=true" >> android/gradle.properties
          echo "org.gradle.java.home=$JAVA_HOME" >> android/gradle.properties
          
          # 修复Flutter插件应用方式 - 修改app/build.gradle
          cat > android/app/build.gradle.new << 'EOF'
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dev.flutter.flutter-gradle-plugin'
}

android {
    namespace "com.example.change.copy"
    compileSdkVersion 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.example.change_copy"
        minSdkVersion 24
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0"
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.multidex:multidex:2.0.1'
}
EOF
          mv android/app/build.gradle.new android/app/build.gradle
          
          # 确保settings.gradle正确配置
          cat > android/settings.gradle << 'EOF'
pluginManagement {
    def flutterSdkPath = {
        def properties = new Properties()
        file("local.properties").withInputStream { properties.load(it) }
        def flutterSdkPath = properties.getProperty("flutter.sdk")
        assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
        return flutterSdkPath
    }()

    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "dev.flutter.flutter-plugin-loader" version "1.0.0"
    id "com.android.application" version "8.0.0" apply false
    id "org.jetbrains.kotlin.android" version "1.8.0" apply false
}

include ":app"
EOF
          
          # 设置Flutter SDK路径
          echo "flutter.sdk=$(which flutter | xargs dirname | xargs dirname)" > android/local.properties
          
          # 应用补丁文件
          mkdir -p android/app/src/main/assets
          if [ -d "patches" ]; then
            echo "应用补丁文件:"
            ls -la patches
            cp -r patches/* android/
          fi
          
          echo "Gradle和Flutter插件配置修复完成"

      # 获取Flutter依赖
      - name: Get dependencies
        run: flutter pub get

      # 构建Debug APK
      - name: Build Debug APK
        run: |
          echo "开始构建Debug APK..."
          flutter build apk --debug --no-android-gradle-daemon --suppress-analytics --android-skip-build-dependency-validation
          
          # 检查APK是否生成
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "APK构建成功: build/app/outputs/flutter-apk/app-debug.apk"
            ls -la build/app/outputs/flutter-apk/
          else
            echo "尝试使用备用方法..."
            cd android
            ./gradlew -Dorg.gradle.java.home=$JAVA_HOME assembleDebug --info
          fi

      # 上传APK
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: |
            build/app/outputs/flutter-apk/app-debug.apk
            build/app/outputs/apk/debug/app-debug.apk
          if-no-files-found: warn
          retention-days: 7

