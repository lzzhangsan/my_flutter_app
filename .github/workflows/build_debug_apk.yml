name: Flutter Build Debug APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 设置超时时间

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置Java环境
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      # 设置Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      # 显示环境信息
      - name: Show environment info
        run: |
          flutter --version
          java -version
          echo "JAVA_HOME: $JAVA_HOME"
          flutter doctor -v

      # 修复Java Home和Gradle设置
      - name: Fix Java Home and Gradle settings
        run: |
          # 准备Gradle目录
          mkdir -p android/gradle/wrapper
          
          # 下载gradle-wrapper.jar
          curl -L --retry 5 --retry-delay 3 -o android/gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.0.0/gradle/wrapper/gradle-wrapper.jar
          
          # 创建gradle-wrapper.properties
          echo "distributionBase=GRADLE_USER_HOME" > android/gradle/wrapper/gradle-wrapper.properties
          echo "distributionPath=wrapper/dists" >> android/gradle/wrapper/gradle-wrapper.properties
          echo "zipStoreBase=GRADLE_USER_HOME" >> android/gradle/wrapper/gradle-wrapper.properties
          echo "zipStorePath=wrapper/dists" >> android/gradle/wrapper/gradle-wrapper.properties
          echo "distributionUrl=https\://services.gradle.org/distributions/gradle-8.0-all.zip" >> android/gradle/wrapper/gradle-wrapper.properties
          
          # 创建简化版本的gradlew脚本
          echo '#!/bin/sh' > android/gradlew
          echo 'exec gradle "$@"' >> android/gradlew
          chmod +x android/gradlew
          
          # 修复gradle.properties文件
          echo "org.gradle.jvmargs=-Xmx1536M" > android/gradle.properties
          echo "android.useAndroidX=true" >> android/gradle.properties
          echo "android.enableJetifier=true" >> android/gradle.properties
          echo "org.gradle.java.home=$JAVA_HOME" >> android/gradle.properties
          
          # 显示文件和目录
          echo "Gradle环境准备完成"
          ls -la android/gradle/wrapper
          cat android/gradle.properties

      # 修复Android配置
      - name: Fix Android configurations
        run: |
          # 修复app/build.gradle中的SDK版本
          sed -i 's/compileSdkVersion 35/compileSdkVersion 34/g' android/app/build.gradle
          sed -i 's/targetSdkVersion 35/targetSdkVersion 34/g' android/app/build.gradle
          
          # 设置Flutter SDK路径
          echo "flutter.sdk=$(which flutter | xargs dirname | xargs dirname)" > android/local.properties
          
          # 准备assets目录
          mkdir -p android/app/src/main/assets
          
          # 应用补丁文件
          if [ -d "patches" ]; then
            echo "应用补丁文件:"
            ls -la patches
            cp -r patches/* android/
          fi

      # 获取Flutter依��
      - name: Get dependencies
        run: flutter pub get

      # 构建Debug APK
      - name: Build Debug APK
        run: |
          echo "开始构建Debug APK..."
          flutter build apk --debug --no-android-gradle-daemon --suppress-analytics
          
          # 检查APK是否生成
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "APK构建成功: build/app/outputs/flutter-apk/app-debug.apk"
            ls -la build/app/outputs/flutter-apk/
          else
            echo "Flutter构建失败，尝试直接使用Gradle"
            cd android
            ./gradlew -Dorg.gradle.java.home=$JAVA_HOME assembleDebug --info
          fi

      # 上传APK
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: |
            build/app/outputs/flutter-apk/app-debug.apk
            build/app/outputs/apk/debug/app-debug.apk
          if-no-files-found: warn
          retention-days: 7

