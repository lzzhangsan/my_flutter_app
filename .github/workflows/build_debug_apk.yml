name: Flutter Build Debug APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发工作流

env:
  GRADLE_VERSION: '8.0.0'  # 与android/build.gradle中的Android Gradle插件版本匹配
  KOTLIN_VERSION: '1.8.0'  # 与android/build.gradle中的kotlin_version匹配

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 设置超时时间

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List project structure
        run: |
          echo "查看项目结构"
          ls -la
          ls -la android || echo "android目录不存在"
          ls -la patches || echo "patches目录不存在"

      # 设置Java环境
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      # 设置Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      # 显示环境信息
      - name: Show environment info
        run: |
          flutter --version
          java -version
          echo "检查Android SDK是否可用:"
          flutter doctor -v

      # 修复Android配置
      - name: Fix Android configurations
        run: |
          # 修复app/build.gradle中的SDK版本
          sed -i 's/compileSdkVersion 35/compileSdkVersion 34/g' android/app/build.gradle
          sed -i 's/targetSdkVersion 35/targetSdkVersion 34/g' android/app/build.gradle
          
          # 确保Gradle配置一致
          # 在settings.gradle中使用与build.gradle相同的AGP版本
          sed -i 's/id "com.android.application" version "8.1.0"/id "com.android.application" version "8.0.0"/g' android/settings.gradle
          
          # 确保本地Gradle properties存在
          cat > android/local.properties << EOF
          flutter.sdk=$(which flutter | xargs dirname | xargs dirname)
          EOF
          
          # 确保补丁目录和文件存在
          mkdir -p android/app/src/main/assets
          if [ -d "patches" ]; then
            # 显示补丁文件
            ls -la patches
            # 复制补丁文件到android目录
            cp -r patches/* android/
            echo "补丁文件已复制到android目录"
          else
            echo "patches目录不存在"
          fi
          
          # 显示修改后的文件内容
          echo "修改后的app/build.gradle内容:"
          cat android/app/build.gradle
          
          echo "修改后的settings.gradle内容:"
          cat android/settings.gradle

      # 获取Flutter依赖
      - name: Get dependencies
        run: |
          flutter pub get
          # 将项目依赖和Flutter工具信息显示出来
          flutter pub deps

      # 确保Gradle wrapper配置正确
      - name: Setup Gradle wrapper
        run: |
          mkdir -p android/gradle/wrapper
          
          # 创建wrapper.properties文件，使用8.0版本的Gradle (与AGP 8.0.0兼容)
          cat > android/gradle/wrapper/gradle-wrapper.properties << EOF
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.0-all.zip
          EOF
          
          # 使用多个源尝试下载gradle-wrapper.jar
          if ! curl -L --retry 5 --retry-delay 3 --connect-timeout 60 -o android/gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.0.0/gradle/wrapper/gradle-wrapper.jar; then
            echo "从Maven仓库下载..."
            curl -L --retry 5 --retry-delay 3 --connect-timeout 60 -o android/gradle/wrapper/gradle-wrapper.jar https://repo1.maven.org/maven2/org/gradle/gradle-wrapper/8.0.0/gradle-wrapper-8.0.0.jar || echo "无法下载gradle-wrapper.jar"
          fi
          
          # 确保gradlew可执行
          chmod +x android/gradlew
          
          # 确保Gradle properties设置正确
          cat > android/gradle.properties << EOF
          org.gradle.jvmargs=-Xmx1536M
          android.useAndroidX=true
          android.enableJetifier=true
          android.nonTransitiveRClass=false
          android.nonFinalResIds=false
          android.defaults.buildfeatures.buildconfig=true
          EOF

      # 运行Flutter build前先确保环境一致
      - name: Pre-build check
        run: |
          # 确保本地Flutter环境正确
          flutter doctor -v
          
          # 准备空的assets目录以避免可��的错误
          mkdir -p android/app/src/main/assets
          
          # 验证所有必需的文件都存在
          if [ ! -f "android/build.gradle" ]; then
            echo "android/build.gradle不存在，创建一个基本版本"
            # 创建一个基本版本的build.gradle
            cat > android/build.gradle << EOF
          buildscript {
              ext.kotlin_version = '${{ env.KOTLIN_VERSION }}'
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:${{ env.GRADLE_VERSION }}'
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:\$kotlin_version"
              }
          }

          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }

          rootProject.buildDir = '../build'
          subprojects {
              project.buildDir = "\${rootProject.buildDir}/\${project.name}"
          }
          EOF
          fi

      # 构建Debug APK
      - name: Build Debug APK
        run: |
          echo "构建Debug APK..."
          flutter build apk --debug --suppress-analytics --android-skip-build-dependency-validation

      # 备用构建方法
      - name: Fallback Build (if needed)
        if: failure()
        run: |
          echo "尝试备用构建方法..."
          cd android
          ./gradlew assembleDebug --stacktrace

      # 上传APK
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: |
            build/app/outputs/flutter-apk/app-debug.apk
            build/app/outputs/apk/debug/app-debug.apk
          if-no-files-found: warn
          retention-days: 7

      # 保存构建日志
      - name: Save build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            android/app/build/reports/
            android/build/reports/
            ~/.gradle/daemon/*/daemon-*.out.log
          if-no-files-found: warn
          retention-days: 3
