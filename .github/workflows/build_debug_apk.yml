name: Flutter Build Debug APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 设置超时时间

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List project structure
        run: |
          echo "查看项目结构"
          ls -la
          echo "Android目录内容:"
          ls -la android || echo "android目录不存在"
          echo "查看是否存在gradlew:"
          if [ -f "android/gradlew" ]; then
            echo "gradlew存在"
          else
            echo "gradlew不存在，需要创建"
          fi

      # 设置Java环境
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      # 设置Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      # 显��环境信息
      - name: Show environment info
        run: |
          flutter --version
          java -version
          echo "检查Android SDK���否可用:"
          flutter doctor -v

      # 准备Gradle环境
      - name: Prepare Gradle environment
        run: |
          # 确保gradle wrapper目录存在
          mkdir -p android/gradle/wrapper
          
          # 创建gradle-wrapper.properties
          cat > android/gradle/wrapper/gradle-wrapper.properties << EOF
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.0-all.zip
          EOF
          
          # 下载gradle-wrapper.jar
          curl -L --retry 5 --retry-delay 3 --connect-timeout 60 -o android/gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.0.0/gradle/wrapper/gradle-wrapper.jar
          
          # 创建简化版本的gradlew脚本
          cat > android/gradlew << 'EOF'
          #!/bin/sh
          exec gradle "$@"
          EOF
          
          # 设置执行权限
          chmod +x android/gradlew
          
          echo "Gradle环境准备完成"
          ls -la android/gradle/wrapper

      # 修复Android配置
      - name: Fix Android configurations
        run: |
          # 修复app/build.gradle中的SDK版本
          sed -i 's/compileSdkVersion 35/compileSdkVersion 34/g' android/app/build.gradle
          sed -i 's/targetSdkVersion 35/targetSdkVersion 34/g' android/app/build.gradle
          
          # 确保本地Gradle properties存在
          cat > android/local.properties << EOF
          flutter.sdk=$(which flutter | xargs dirname | xargs dirname)
          EOF
          
          # 确保补丁目录和文件存在
          mkdir -p android/app/src/main/assets
          if [ -d "patches" ]; then
            echo "应用补丁文件:"
            ls -la patches
            cp -r patches/* android/
            echo "补丁文件已复制到android目录"
          else
            echo "patches目录不存在"
          fi

      # 获取Flutter依赖
      - name: Get dependencies
        run: |
          flutter pub get

      # 构建Debug APK
      - name: Build Debug APK
        run: |
          echo "开始构建Debug APK..."
          flutter build apk --debug --suppress-analytics
          
          # 检查APK是否生成
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "APK构建成功: build/app/outputs/flutter-apk/app-debug.apk"
            ls -la build/app/outputs/flutter-apk/
          else
            echo "Flutter构建失败，尝试使用Gradle直接构建"
            cd android
            ./gradlew assembleDebug --info
            
            if [ -f "../build/app/outputs/apk/debug/app-debug.apk" ]; then
              echo "Gradle构建成功: build/app/outputs/apk/debug/app-debug.apk"
              ls -la ../build/app/outputs/apk/debug/
            else
              echo "Gradle构建也失败了"
              exit 1
            fi
          fi

      # 上传APK
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: |
            build/app/outputs/flutter-apk/app-debug.apk
            build/app/outputs/apk/debug/app-debug.apk
          if-no-files-found: warn
          retention-days: 7

      # 保存构建日志
      - name: Save build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            android/app/build/reports/
            android/build/reports/
            ~/.gradle/daemon/*/daemon-*.out.log
          if-no-files-found: warn
          retention-days: 3
