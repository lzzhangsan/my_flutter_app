name: Flutter Build APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'  # 指定Flutter版本
          channel: 'stable'

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-

      # 确保assets目录存在
      - name: Ensure assets directories exist
        run: |
          mkdir -p assets/media
          touch assets/media/.gitkeep

      # 获取Flutter依赖
      - name: Get dependencies
        run: flutter pub get

      # 更新Android Gradle插件版本
      - name: Update Android build configurations
        run: |
          cd android
          # 更新build.gradle中的Gradle插件版本
          sed -i 's/com.android.tools.build:gradle:[0-9.]\+/com.android.tools.build:gradle:8.3.0/g' build.gradle
          # 更新Kotlin版本
          sed -i 's/ext.kotlin_version = .*$/ext.kotlin_version = "1.9.10"/g' build.gradle
          
          # 增加Java堆内存以解决OOM问题
          cat > gradle.properties << EOF
          org.gradle.jvmargs=-Xmx4g -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.daemon=false
          android.nonTransitiveRClass=false
          android.nonFinalResIds=false
          EOF
          
          # 确保app/build.gradle使用声明式方式应用Flutter插件
          if ! grep -q "id 'dev.flutter.flutter-gradle-plugin'" app/build.gradle; then
            sed -i '/id .com.android.application./a\\    id "dev.flutter.flutter-gradle-plugin"' app/build.gradle
          fi
          
          # 移除旧的apply方式
          sed -i '/apply from: "\$flutterRoot\/packages\/flutter_tools\/gradle\/flutter.gradle"/d' app/build.gradle

      # 修复FFmpeg Kit插件问题
      - name: Fix FFmpeg Kit plugin
        run: |
          FFMPEG_PLUGIN_PATH="$HOME/.pub-cache/hosted/pub.dev/ffmpeg_kit_flutter_full-6.0.3/android/src/main/java/com/arthenica/ffmpegkit/flutter/FFmpegKitFlutterPlugin.java"
          
          # 检查文件是否存在
          if [ -f "$FFMPEG_PLUGIN_PATH" ]; then
            echo "找到FFmpeg Kit插件文件，开始修复..."
            
            # 简单替换，将整个registerWith方法注释掉
            sed -i 's/public static void registerWith(final io.flutter.plugin.common.PluginRegistry.Registrar registrar)/\/\/ 已注释掉: public static void registerWith(final io.flutter.plugin.common.PluginRegistry.Registrar registrar)/g' "$FFMPEG_PLUGIN_PATH"
            sed -i '/\/\/ 已注释掉: public static void registerWith/,/}/s/^/\/\/ /' "$FFMPEG_PLUGIN_PATH"
            
            # 替换init方法参数中的Registrar类型
            sed -i 's/final io.flutter.plugin.common.PluginRegistry.Registrar registrar/final Object registrar/g' "$FFMPEG_PLUGIN_PATH"
            
            echo "FFmpeg Kit插件修复完成!"
          else
            echo "警告: 找不到FFmpeg Kit插件文件: $FFMPEG_PLUGIN_PATH"
            find $HOME/.pub-cache -name "FFmpegKitFlutterPlugin.java" || echo "没有找到FFmpegKitFlutterPlugin.java文件"
          fi

      # 修改pubspec.yaml以暂时禁用ffmpeg_kit_flutter_full
      - name: Disable problematic plugin
        run: |
          # 创建临时备份
          cp pubspec.yaml pubspec.yaml.bak
          
          # 注释掉ffmpeg_kit_flutter_full依赖
          sed -i 's/^  ffmpeg_kit_flutter_full: \^6.0.3/  # ffmpeg_kit_flutter_full: \^6.0.3  # 临时禁用/g' pubspec.yaml
          
          # 显示修改后的pubspec.yaml
          echo "修改后的pubspec.yaml:"
          cat pubspec.yaml | grep ffmpeg
          
          # 运行flutter pub get更新依赖
          flutter pub get

      # 临时修改使用FFmpeg的代码
      - name: Modify FFmpeg related code
        run: |
          if [ -f "lib/media_manager_page.dart" ]; then
            echo "修改 media_manager_page.dart 文件，临时禁用FFmpeg相关功能..."
            
            # 备份原始文件
            cp lib/media_manager_page.dart lib/media_manager_page.dart.bak
            
            # 注释掉FFmpeg导入
            sed -i 's|^import .package:ffmpeg_kit_flutter_full/.*|// &  // 临时禁用|g' lib/media_manager_page.dart
            
            # 创建临时替代功能
            cat > /tmp/ffmpeg_replacement.dart << 'EOF'
// 临时FFmpeg替代实现
class _FFmpegReplacement {
  static Future<dynamic> execute(String command) async {
    print('FFmpeg功能临时禁用: $command');
    return _DummySession();
  }
}

class _ReturnCodeReplacement {
  static bool isSuccess(dynamic returnCode) {
    return true;
  }
}

class _DummySession {
  Future<dynamic> getReturnCode() async {
    return 0;
  }
}
EOF
            
            # 将替代实现插入到文件顶部
            sed -i '1s|^|// 临时FFmpeg替代实现\nimport "dart:async";\n\n|' lib/media_manager_page.dart
            cat /tmp/ffmpeg_replacement.dart >> lib/media_manager_page.dart
            
            # 替换FFmpegKit调用
            sed -i 's/FFmpegKit.execute/_FFmpegReplacement.execute/g' lib/media_manager_page.dart
            
            # 替换ReturnCode调用
            sed -i 's/ReturnCode.isSuccess/_ReturnCodeReplacement.isSuccess/g' lib/media_manager_page.dart
            
            echo "FFmpeg相关代码修改完成!"
          else
            echo "警告: 找不到 lib/media_manager_page.dart 文件"
          fi

      # 构建APK
      - name: Build APK
        run: |
          # 设置更大的Java堆内存
          export GRADLE_OPTS="-Xmx4g -Dorg.gradle.jvmargs=-Xmx4g"
          flutter build apk --release --android-skip-build-dependency-validation

      # 上传APK
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7
