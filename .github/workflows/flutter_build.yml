name: Flutter Build APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'  # 指定Flutter版本
          channel: 'stable'

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-

      # 确保assets目录存在
      - name: Ensure assets directories exist
        run: |
          mkdir -p assets/media
          touch assets/media/.gitkeep

      # 获取Flutter依赖
      - name: Get dependencies
        run: flutter pub get

      # 更新Android Gradle插件版本
      - name: Update Android build configurations
        run: |
          cd android
          # 更新build.gradle中的Gradle插件版本
          sed -i 's/com.android.tools.build:gradle:[0-9.]\+/com.android.tools.build:gradle:8.3.0/g' build.gradle
          # 更新Kotlin版本
          sed -i 's/ext.kotlin_version = .*$/ext.kotlin_version = "1.9.10"/g' build.gradle
          
          # 增加Java堆内存以解决OOM问题
          cat > gradle.properties << EOF
          org.gradle.jvmargs=-Xmx4g -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.daemon=false
          android.nonTransitiveRClass=false
          android.nonFinalResIds=false
          EOF
          
          # 确保app/build.gradle使用声明式方式应用Flutter插件
          if ! grep -q "id 'dev.flutter.flutter-gradle-plugin'" app/build.gradle; then
            sed -i '/id .com.android.application./a\\    id "dev.flutter.flutter-gradle-plugin"' app/build.gradle
          fi
          
          # 移除旧的apply方式
          sed -i '/apply from: "\$flutterRoot\/packages\/flutter_tools\/gradle\/flutter.gradle"/d' app/build.gradle

      # 修复FFmpeg Kit插件问题
      - name: Fix FFmpeg Kit plugin
        run: |
          FFMPEG_PLUGIN_PATH="$HOME/.pub-cache/hosted/pub.dev/ffmpeg_kit_flutter_full-6.0.3/android/src/main/java/com/arthenica/ffmpegkit/flutter/FFmpegKitFlutterPlugin.java"
          if [ -f "$FFMPEG_PLUGIN_PATH" ]; then
            echo "修复FFmpeg Kit插件..."
            
            # 创建备份
            cp "$FFMPEG_PLUGIN_PATH" "${FFMPEG_PLUGIN_PATH}.bak"
            
            # 方法1：将插件完全修改为使用新的Plugin API
            cat > "$FFMPEG_PLUGIN_PATH" << 'EOF'
// 修改后的FFmpegKitFlutterPlugin.java文件
package com.arthenica.ffmpegkit.flutter;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.util.Log;

import androidx.annotation.NonNull;

import com.arthenica.ffmpegkit.FFmpegKit;
import com.arthenica.ffmpegkit.FFmpegKitConfig;
import com.arthenica.ffmpegkit.FFprobeKit;
import com.arthenica.ffmpegkit.Level;
import com.arthenica.ffmpegkit.LogCallback;
import com.arthenica.ffmpegkit.LogRedirectionStrategy;
import com.arthenica.ffmpegkit.MediaInformation;
import com.arthenica.ffmpegkit.MediaInformationJsonParser;
import com.arthenica.ffmpegkit.MediaInformationSession;
import com.arthenica.ffmpegkit.Session;
import com.arthenica.ffmpegkit.Statistics;
import com.arthenica.ffmpegkit.StatisticsCallback;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicLong;

import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.embedding.engine.plugins.activity.ActivityAware;
import io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.MethodChannel.MethodCallHandler;
import io.flutter.plugin.common.MethodChannel.Result;
import io.flutter.plugin.common.PluginRegistry;

/**
 * <p>Flutter plugin for FFmpeg.
 *
 * @author Taner Sener
 * @since 0.1.0
 */
public class FFmpegKitFlutterPlugin implements FlutterPlugin, ActivityAware, MethodCallHandler, PluginRegistry.ActivityResultListener {
    public static final String LIBRARY_NAME = "ffmpeg-kit-flutter";
    public static final String PLATFORM_NAME = "android";

    private static final String METHOD_PLATFORM = "getPlatform";
    private static final String METHOD_VERSION = "getVersion";
    private static final String METHOD_FFmpegVersion = "getFFmpegVersion";
    private static final String METHOD_Execute = "ffmpegExecute";
    private static final String METHOD_Cancel = "cancel";
    private static final String METHOD_CancelSession = "cancelSession";
    private static final String METHOD_GetSessions = "getSessions";
    private static final String METHOD_GetSession = "getSession";
    private static final String METHOD_FFprobeExecute = "ffprobeExecute";
    private static final String METHOD_GetMediaInformation = "getMediaInformation";
    private static final String METHOD_EnableRedirection = "enableRedirection";
    private static final String METHOD_DisableRedirection = "disableRedirection";
    private static final String METHOD_WriteToFile = "writeToFile";
    private static final String METHOD_SetFontconfigConfigurationPath = "setFontconfigConfigurationPath";
    private static final String METHOD_SetFontDirectory = "setFontDirectory";
    private static final String METHOD_SetLogLevel = "setLogLevel";
    private static final String METHOD_GetLogLevel = "getLogLevel";
    private static final String METHOD_IsLTSBuild = "isLTSBuild";
    private static final String METHOD_RegisterNewFFmpegPipe = "registerNewFFmpegPipe";
    private static final String METHOD_CloseFFmpegPipe = "closeFFmpegPipe";
    private static final String METHOD_GetFFmpegSessions = "getFFmpegSessions";
    private static final String METHOD_GetFFprobeSessions = "getFFprobeSessions";
    private static final String METHOD_GetMediaInformationSessions = "getMediaInformationSessions";
    private static final String METHOD_SelectDocumentForRead = "selectDocumentForRead";
    private static final String METHOD_SelectDocumentForWrite = "selectDocumentForWrite";

    private static final int SELECT_DOCUMENT_FOR_READ = 1;
    private static final int SELECT_DOCUMENT_FOR_WRITE = 2;

    private final AtomicLong sessionIdGenerator;

    private MethodChannel channel;
    private Context context;
    private Activity activity;
    private final Map<Long, Integer> requestIdMap;
    private final Map<String, String> documentMap;

    /**
     * Default constructor.
     */
    public FFmpegKitFlutterPlugin() {
        sessionIdGenerator = new AtomicLong(1);
        requestIdMap = new HashMap<>();
        documentMap = new HashMap<>();
    }

    /**
     * v2 plugin registration.
     */
    @Override
    public void onAttachedToEngine(@NonNull final FlutterPluginBinding flutterPluginBinding) {
        channel = new MethodChannel(flutterPluginBinding.getBinaryMessenger(), "ffmpeg_kit_flutter");
        channel.setMethodCallHandler(this);

        this.context = flutterPluginBinding.getApplicationContext();
    }

    /**
     * v1 plugin registration for older versions.
     */
    @SuppressWarnings("deprecation")
    public static void registerWith(final Object registrar) {
        final FFmpegKitFlutterPlugin plugin = new FFmpegKitFlutterPlugin();
        plugin.channel = new MethodChannel(((io.flutter.plugin.common.PluginRegistry.Registrar) registrar).messenger(), "ffmpeg_kit_flutter");
        plugin.channel.setMethodCallHandler(plugin);
        plugin.context = ((io.flutter.plugin.common.PluginRegistry.Registrar) registrar).context();
        if (((io.flutter.plugin.common.PluginRegistry.Registrar) registrar).activity() != null) {
            plugin.activity = ((io.flutter.plugin.common.PluginRegistry.Registrar) registrar).activity();
            ((io.flutter.plugin.common.PluginRegistry.Registrar) registrar).addActivityResultListener(plugin);
        }
    }

    @Override
    public void onDetachedFromEngine(@NonNull final FlutterPluginBinding binding) {
        channel.setMethodCallHandler(null);
        channel = null;
    }

    @Override
    public void onAttachedToActivity(ActivityPluginBinding activityPluginBinding) {
        this.activity = activityPluginBinding.getActivity();
        activityPluginBinding.addActivityResultListener(this);
    }

    @Override
    public void onDetachedFromActivityForConfigChanges() {
        this.activity = null;
    }

    @Override
    public void onReattachedToActivityForConfigChanges(ActivityPluginBinding activityPluginBinding) {
        this.activity = activityPluginBinding.getActivity();
        activityPluginBinding.addActivityResultListener(this);
    }

    @Override
    public void onDetachedFromActivity() {
        this.activity = null;
    }

    @Override
    public void onMethodCall(@NonNull final MethodCall call, @NonNull final Result result) {
        // REST OF THE FILE REMAINS UNCHANGED
EOF

            # 保留原始文件的其余部分
            tail -n +165 "${FFMPEG_PLUGIN_PATH}.bak" >> "$FFMPEG_PLUGIN_PATH"
            
            echo "FFmpeg Kit插件修复完成!"
          else
            echo "警告: 找不到FFmpeg Kit插件文件，跳过修复"
            # 尝试查找插件文件
            find $HOME/.pub-cache -name "FFmpegKitFlutterPlugin.java" || echo "没有找到FFmpegKitFlutterPlugin.java文件"
          fi

      # 构建APK
      - name: Build APK
        run: |
          # 设置更大的Java堆内存
          export GRADLE_OPTS="-Xmx4g -Dorg.gradle.jvmargs=-Xmx4g"
          flutter build apk --release --android-skip-build-dependency-validation

      # 上传APK
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7
